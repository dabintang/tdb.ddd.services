//后端项目结构一般如下划分：
webapi层
tdb.ddd.xxx.webapi                  对外提供api接口；
应用层
tdb.ddd.xxx.application             应用层，业务编排处理、事务；
tdb.ddd.xxx.application.contracts   应用服务接口、对外数据结构定义；
tdb.ddd.xxx.application.remote      调用外部服务
领域层
tdb.ddd.xxx.domain                  领域层，聚合、聚合服务、仓储接口；(核心逻辑，不分版本)
tdb.ddd.xxx.domain.contracts        枚举等定义；
tdb.ddd.xxx.repository.xxxx         仓储，持久化数据；
基础层
tdb.ddd.xxx.infrastructure		    一些通用基础设施服务，持久化、缓存、配置、ioc等；
tdb.ddd.contracts		            一些通用的包装类、消息体、枚举等；


//项目间依赖关系：
webapi层依赖：应用层、领域层、基础层
应用层依赖：领域层、基础层
领域层依赖：基础层


//聚合、聚合根、实体、值
聚合组成：聚合根（唯一）、实体、值
聚合根是实体
实体对象由ID区分彼此
通过聚合根ID获取聚合
聚合是最小操作对象，理论上不能跳过聚合直接操作里面的实体、值（实际情况是如果给值赋值时没有任何逻辑处理，还是可以直接赋值）
聚合之间通过聚合根ID持有对方

//应用层
应用层不要直接操作仓储，应通过领域层操作（报表查询除外）

//领域层
所有写操作必须通过聚合根操作
一些读操作可适当跳过聚合，直接查询仓储获得数据对象（这是为了性能做的妥协，一般只适用于展示用的数据，如列表等）


